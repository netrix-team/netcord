{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Netcord","text":"<p>Welcome to Netcord, the Async Discord OAuth2 Toolkit for FastAPI! \ud83c\udf89</p> <p>Netcord helps you:</p> <ul> <li>\ud83d\udd10 Authenticate users via OAuth2 with Discord</li> <li>\ud83d\udd04 Refresh and revoke tokens effortlessly</li> <li>\ud83e\udde9 Fetch and cache user &amp; guild data</li> <li>\ud83d\udd27 Integrate seamlessly into FastAPI routes</li> </ul> <p>Info</p> <p>Version: 2.2.5 Docs: link Repo: netrix-team/netcord</p>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>\ud83d\ude80 Installation</li> <li>\ud83d\udd27 Usage</li> <li>\ud83d\udee0 API Reference</li> <li>\ud83d\udcdc Changelog</li> </ul>"},{"location":"guides/installation/","title":"\ud83d\ude80 Installation","text":"<p>Get up and running with Netcord in no time.</p>"},{"location":"guides/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python \u2265 3.12</li> <li><code>httpx</code>, <code>fastapi</code>, <code>pydantic</code></li> </ul>"},{"location":"guides/installation/#install-from-pypi","title":"Install from PyPI","text":"<pre><code>pip install netcord\n</code></pre>"},{"location":"guides/installation/#install-from-github","title":"Install from GitHub","text":"<pre><code>pip install git+https://github.com/netrix-team/netcord.git@main\n</code></pre> <p>Tip</p> <p>For direct control or local hacks, clone the repo and run:</p> <pre><code>git clone https://github.com/netrix-team/netcord.git\ncd netcord\npip install -e .\n</code></pre>"},{"location":"guides/usage/","title":"\ud83d\udd27 Usage","text":"<p>A simple FastAPI integration example.</p>"},{"location":"guides/usage/#1-initialize-netcord","title":"1. Initialize Netcord","text":"<pre><code>from fastapi import FastAPI\nfrom netcord import Netcord\n\napp = FastAPI()\n\nnetcord = Netcord(\n    client_id='YOUR_CLIENT_ID',\n    client_secret='YOUR_SECRET',\n    redirect_uri='https://yourapp.com/callback',\n    scopes=('identify', 'email'),\n    bot_token='YOUR_BOT_TOKEN'  # optional, for some endpoints\n)\n</code></pre>"},{"location":"guides/usage/#2-redirect-user-to-discord","title":"2. Redirect user to Discord","text":"<pre><code>from fastapi.responses import RedirectResponse\n\n@app.get('/login')\nasync def login():\n    url = netcord.generate_auth_url(state='random_state')\n    return RedirectResponse(url)\n</code></pre>"},{"location":"guides/usage/#3-handle-callback-exchange-code","title":"3. Handle callback &amp; exchange code","text":"<pre><code>from fastapi import Request\n\n@app.get('/callback')\nasync def callback(request: Request):\n    code = request.query_params.get('code')\n    token = await netcord.exchange_code(code)\n    return {'token': token.to_dict()}\n</code></pre>"},{"location":"guides/usage/#4-fetch-user-guilds","title":"4. Fetch user &amp; guilds","text":"<pre><code>@app.get('/me')\nasync def me(token: str):\n    user = await netcord.fetch_user(token)\n    guilds = await netcord.fetch_guilds(token)\n    return {\n        'user': user.to_dict(),\n        'guilds': [g.to_dict() for g in guilds]\n    }\n</code></pre> <p>Tip</p> <p>Netcord caches fetch_user &amp; fetch_guilds for 5 minutes by default. Use cache=False to bypass.</p>"},{"location":"reference/cache/","title":"\ud83d\uddc2\ufe0f Caching Utility","text":"<p>Provides simple in-memory caching with TTL.</p> <p><code>@cache</code> Decorator Wraps async methods to auto-cache results by identifier.</p> <pre><code>@cache\nasync def fetch_user(self, identifier: str, *, cache: bool = True):\n    ...\n</code></pre> <p>Tip</p> <p>Netcord caches fetch_user &amp; fetch_guilds for 5 minutes by default. Use cache=False to bypass.</p>"},{"location":"reference/depends/","title":"\ud83d\udd17 Dependency","text":"<p>FastAPI dependency for bearer auth.</p> <pre><code>http_bearer = HTTPBearer(auto_error=False)\n\ndef authenticated(\n    header: HTTPAuthorizationCredentials = Depends(http_bearer),\n):\n    if not (header and header.scheme and header.credentials):\n        raise AuthenticationError\n\n    if header.scheme.lower() != 'bearer':\n        raise AuthenticationError(\n            detail='Invalid authentication scheme'\n        )\n</code></pre>"},{"location":"reference/errors/","title":"\ud83d\udea8 Errors","text":"<p>Custom HTTPException subclasses.</p>"},{"location":"reference/errors/#class-neterrorhttpexception","title":"<code>class NetError(HTTPException): ...</code>","text":"<p>Base Exception</p>"},{"location":"reference/errors/#class-authenticationerrorneterror","title":"<code>class AuthenticationError(NetError): ...</code>","text":"<p>Returns 401 if authentication is incorrect</p>"},{"location":"reference/errors/#class-tokenexchangeerrorneterror","title":"<code>class TokenExchangeError(NetError): ...</code>","text":"<p>Returns 400 if the authentication code exchange failed</p>"},{"location":"reference/models/","title":"\ud83d\udce6 Models","text":"<p>Pydantic models for tokens, users, guilds.</p>"},{"location":"reference/models/#oauth2token","title":"<code>Oauth2Token</code>","text":"<pre><code>class Oauth2Token(BaseModel):\n    access_token: str = Field(...)\n    token_type: str = Field(...)\n    expires_in: int = Field(...)\n    scope: Optional[str] = Field(None)\n    refresh_token: Optional[str] = Field(None)\n</code></pre>"},{"location":"reference/models/#user","title":"<code>User</code>","text":"<pre><code>class User(BaseModel):\n    id: str = Field(...)\n    username: str = Field(...)\n    discriminator: str = Field(...)\n    avatar: Optional[str] = Field(None)\n    avatar_url: Optional[str] = Field(None)\n    email: Optional[str] = Field(None)\n    bot: Optional[bool] = Field(False)\n    mfa_enabled: Optional[bool] = Field(False)\n    banner: Optional[str] = Field(None)\n    accent_color: Optional[int] = Field(None)\n    locale: Optional[str] = Field(None)\n    verified: Optional[bool] = Field(False)\n</code></pre> <p>Info</p> <p>Auto-computed <code>avatar_url</code> generates a direct link to the user's avatar</p>"},{"location":"reference/models/#guild","title":"<code>Guild</code>","text":"<pre><code>class Guild(BaseModel):\n    id: str = Field(...)\n    name: str = Field(...)\n    icon: Optional[str] = Field(None)\n    icon_url: Optional[str] = Field(None)\n    banner: Optional[str] = Field(None)\n    banner_url: Optional[str] = Field(None)\n    owner: Optional[bool] = Field(None)\n    permissions: Optional[str] = Field(None)\n    features: Optional[list[str]] = Field(None)\n</code></pre> <p>Info</p> <p>Auto-computed <code>icon_url</code>, <code>banner_url</code> generates a direct link to the guild's icon and banner</p>"},{"location":"reference/netcord/","title":"Core","text":""},{"location":"reference/netcord/#initialization","title":"Initialization","text":"<pre><code>Netcord(\n    client_id: str,\n    client_secret: str,\n    redirect_uri: str,\n    scopes: tuple[str, ...] = DEFAULT_SCOPES,\n    bot_token: str | None = None\n)\n</code></pre> Parameter Type Description <code>client_id</code> <code>str</code> Discord App Client ID <code>client_secret</code> <code>str</code> Discord App Client Secret <code>redirect_uri</code> <code>str</code> Your OAuth2 redirect URL <code>scopes</code> <code>tuple[str, ...]</code> OAuth2 scopes (default: identify, email\u2026) <code>bot_token</code> <code>str | None</code> Bot token for application API (optional)"},{"location":"reference/netcord/#methods","title":"Methods","text":"<ul> <li> <p><code>generate_auth_url(state: str = None, prompt: str = 'consent') \u2192 str</code></p> <p>Generate the Discord authorization URL.</p> </li> </ul> <pre><code>url = netcord.generate_auth_url(state='xyz', prompt='consent')\n</code></pre> <ul> <li> <p><code>exchange_code(code: str) \u2192 Oauth2Token</code></p> <p>Exchange an authorization code for tokens.</p> <p>Raises TokenExchangeError on failure.</p> </li> </ul> <pre><code>code = 'your code'  # 2mvsjmfv9uaym3thfhdzg\ntoken = exchange_code(code=code)\n</code></pre> <ul> <li> <p><code>refresh_token(refresh_token: str) \u2192 Oauth2Token</code></p> <p>Refresh an OAuth2 token.</p> </li> </ul> <ul> <li> <p><code>revoke_token(token: str, token_type_hint: Literal['access_token','refresh_token'] = None) -&gt; bool</code></p> <p>Revoke an OAuth2 token.</p> </li> </ul>"},{"location":"reference/netcord/#cached-fetches","title":"Cached Fetches","text":"<ul> <li><code>fetch_user(access_token: str) \u2192 User</code></li> <li><code>fetch_guilds(access_token: str) \u2192 list[Guild]</code></li> <li><code>fetch_user_by_id(user_id: str) \u2192 User</code></li> </ul> <p>Info</p> <p>All decorated with <code>@cache</code> (TTL = 5 min). Use <code>cache=False</code> to bypass.</p>"},{"location":"reference/utils/","title":"\ud83e\uddf0 Utilities","text":"<p>Helper functions.</p> <ul> <li><code>snowflake_time(id: str) \u2192 int</code> \u2014 Discord snowflake \u2192 timestamp  </li> <li><code>check_user_role(guild: Guild) \u2192 str</code> \u2014 <code>'owner' | 'admin' | 'member'</code> </li> <li><code>utcnow() \u2192 int</code> \u2014 current UTC timestamp ms  </li> <li><code>parse_ts(timestamp: int) \u2192 datetime</code> \u2014 ms \u2192 <code>datetime</code></li> </ul>"}]}